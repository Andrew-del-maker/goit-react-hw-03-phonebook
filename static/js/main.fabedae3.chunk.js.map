{"version":3,"sources":["Components/Form/Form.js","Components/Filter/Filter.js","Components/ContactList/ContactList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","state","name","number","nameInputId","shortid","generate","numInputId","handleInputChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","type","pattern","title","id","required","onChange","Component","Filter","ContactList","contacts","onDelete","map","onClick","App","filter","formSubmitHandler","data","newContact","oldContact","forEach","contact","alert","console","log","changeFilter","getVisibleContacts","normalizedFilter","toLowerCase","includes","deleteContact","prevState","localStorage","setItem","JSON","stringify","getItem","parsedContacts","parse","visibleContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fabedae3.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport './Form.css';\nimport { Component } from \"react\";\nimport shortid from \"shortid\";\n\nclass Form extends Component{\n    state = {\n        name: '',\n        number: ''\n    }\n    nameInputId = shortid.generate();\n    numInputId = shortid.generate();\n    handleInputChange = (e) => {\n        const { value, name } = e.currentTarget;\n        this.setState({ [name]: value });\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.onSubmit(this.state);\n        this.reset();\n    }\n    reset = () => {\n        this.setState({name: '', number: ''})\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n          <label htmlFor={this.nameInputId}>Name</label>\n          <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value= {this.state.name}\n          id= {this.nameInputId}\n          required\n          onChange={this.handleInputChange}\n          />\n          <br/>\n          <br/>\n          <label htmlFor={this.numInputId}>Number</label>\n          <input\n            type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          value= {this.state.number}\n          id ={this.numInputId}\n          required\n          onChange={this.handleInputChange}\n          />\n          <br/>\n          <br/>\n          <button type=\"submit\" >Add contact</button>\n        </form>\n        );\n    }\n\n}\n\nForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}\n\nexport default Form;","import PropTypes from 'prop-types';\n\nconst Filter = ({value, onChange}) => (\n    <label>\n        <br />\n          Find contacts by name <br /><br /> \n          <input type='text' value={value} onChange={onChange}></input>\n    </label>\n);\n\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nexport default Filter;","import PropTypes from 'prop-types';\n\nconst ContactList = ({ contacts, onDelete }) => (\n    <ul>\n          {contacts.map(({name,id,number}) =>\n              <li key={id}>{name} {number}\n                  <button type=\"button\" onClick={() => onDelete(id)}>Delete</button>\n              </li>\n            )}\n    </ul>\n)\n\nContactList.propTypes = {\n    contacts: PropTypes.array.isRequired,\n    onDelete: PropTypes.func.isRequired\n}\n\nexport default ContactList;","import { Component } from \"react\";\nimport shortid from \"shortid\";\nimport './App.css';\nimport Form from \"./Components/Form\";\nimport Filter from \"./Components/Filter\";\nimport ContactList from \"./Components/ContactList\";\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { name: 'Rosie Simpson', number: '455-555', id: 'id-1' },\n      { name: 'Hermione Kline', number: '698-789', id: 'id-2' },\n      { name: 'Eden Clements', number: '967-123', id: 'id-3' }\n    ],\n    filter: '',\n\n  }\n  componentDidUpdate(prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n    }\n  }\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts !== null) {\n      this.setState({ contacts: parsedContacts })\n    }\n  }\n  formSubmitHandler = data => {\n    const { name, number } = data;\n    const { contacts } = this.state;\n    const newContact = {\n      name: name,\n      number: number,\n      id: shortid.generate()\n    }\n    let oldContact = false;\n    contacts.forEach(contact => {\n      if (contact.name === newContact.name) {\n\n        alert(`${contact.name} is already in contacts`);\n        oldContact = true;\n        return oldContact;\n      }\n    })\n    if (!oldContact) {\n      console.log(oldContact)\n      this.setState(({ contacts }) => ({\n        contacts: [...contacts, newContact],\n      }))\n    }\n\n  }\n\n  changeFilter = (e) => {\n    this.setState({ filter: e.currentTarget.value });\n  }\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  }\n  deleteContact = (id) => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== id),\n    }));\n  }\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <div>\n        <Form onSubmit={this.formSubmitHandler} />\n        <Filter value={filter} onChange={this.changeFilter} />\n        <h3>Contacts</h3>\n        <ContactList contacts={visibleContacts} onDelete={this.deleteContact} />\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}